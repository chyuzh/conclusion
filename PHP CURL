PHP cURL 函数:

概述:

PHP支持的由Daniel Stenberg 创建的libcurl库允许你和各种服务器使用各种类型的协议进行连接和通讯
libcurl目前支持http, https, ftp, gopher, telnet, dict, file, ldap协议 libcurl同时也支持HTTPS认证,
HTTP POST, HTTP PUT, FTP 上传(这个也能通过PHP的FTP扩展完成), HTTP基于表单的上传, 代理, cookies 和
用户名+ 密码的认证
PHP中使用cURL实现Get 和Post请求的方法

需求:

为了使用PHP的cURL函数, 需要安装 libcurl包
PHP需要使用libcurl 7.0.2beta 以上的版本, 在PHP4.2.3里使用cURL,需要安装7.9.0或更高版本的libcurl,
从PHP 4.3.0 开始 需要安装7.9.0或更高版本的libcurl, 从PHP5.0.0 开始 需要安装 7.10.5或更高版本的libcurl

安装:

要使用PHP的cURL支持必须在编译PHP时加上 --with-curl[=DIR] 选项, DIR为包含lib 和include 的目录路径,
在include目录中必须有一个名为curl,包含了easy.h和curl.h的文件夹, lib文件夹里应该有一个名为libcurl.a的文件
对于PHP4.3.0可以配置 with-curlwrappers 使 cURL使用URL流

资源类型:

这个扩展定义了2中资源: cURL句柄和cURL批处理句柄

PHP cURL 函数

curl_close()                // 关闭一个cURL会话

curl_copy_handle()          // 复制一个cURL句柄和它的所有选项

curl_errno()                // 返回最后一次的错误号

curl_error()                // 返回一个保护当前会话最近一次错误的字符串

curl_escape()               // 返回转义字符串, 对给定的字符串进行URL编码

curl_exec()                 // 执行一个cURL会话

curl_file_create()          // 创建一个CURLFile 对象

curl_getinfo()              // 获取一个cURL连接资源句柄的信息

curl_init()                 // 初始化一个cURL会话

curl_multi_add_handle()     // 向curl批处理会话中添加单独的curl句柄

curl_multi_close()          // 关闭一组cURL句柄

curl_multi_exec()           // 运行当前cURL句柄的子连接

curl_multi_getcontent()     // 如果设置了CURLOPT_RETURNTRANSFER, 则返回获取的输出的文本流

curl_multi_info_read()      // 获取当前解析的cURL的相关传输信息

curl_multi_init()           // 返回一个新cURL批处理句柄

curl_multi_remove_handle()  // 移除curl批处理句柄资源中的某个句柄资源

curl_multi_select()         // 等待多有cURL批处理中的活动连接

curl_multi_setopt()         // 设置一个批处理cURL传输选项

curl_multi_strerror()       // 返回描述错误码的字符串文本

curl_pause()                // 暂停及恢复连接

curl_reset()                // 重置libcurl的会话句柄的所有选项

curl_setopt_array()         // 为cURL传输会话批量设置选项

curl_setopt()               // 设置一个cURL 传输选项

curl_share_close()          // 关闭cURL共享句柄

curl_share_init()           // 初始化cURL共享句柄

curl_share_setopt()         // 设置一个共享句柄的cURL传输选项

curl_strerror()             // 犯会错误代码的字符串描述

curl_unescape()             // 解码URL编码后的字符串

curl_version()              // 获取cURL版本信息




-----------------------------------

curl_setopt 函数(PHP 4 >= 4.0.2 , PHP 5)

curl_setopt     // 设置一个cURL传输选项

curl_setopt (resource $ch, int $option, mixed $value)

为给定的cURL会话句柄设置一个选项

参数

$ch
由 curl_init() 返回的 cURL 句柄

$option
需要设置的CURLOPT_XXX 选项

$value
将设置在$option 选项上的值
对于下面的这些option的可选参数, value 应该被设置一个bool类型的值:

CURLOPT_AUTOREFERER     // 当根据Location: 重定向时, 自动设置header中的Referer 信息

CURLOPT_BINARYTRANSFER  // 在启用CURLOPT_RETURNTRANSFER的时候 , 返回原生的(Raw)输出

CURLOPT_COOKIESESSION   // 启用时curl会仅仅传递一个session cookie, 忽略其他的cookie,
                           默认状况下cURL会将所有的cookie 返回给服务端, session cookie
                           是指那些用来判断服务器端的session 是否有效而存在的cookie

CURLOPT_CRLF            // 启用时将Unix的换行符转换成回车换行符

CURLOPT_DNS_USE_GLOBAL_CACHE    // 启用时会启用一个全局的DNS缓存, 此项为线程安全的,并且默认启用

CURLOPT_FAILONERROR     // 显示HTTP状态码, 默认行为是忽略编号小于等于400的HTTP信息

CURLOPT_FILETIME        // 启用时会尝试修改远程文档中的信息, 结果信息会通过curl_getinfo()函数
                            的CURLINFO_FILETIME选项返回  curl_getinfo()

CURLOPT_FOLLOWLOCATION  // 启用时会将服务器返回的"Location: " 放在header中递归的返回服务器,
                            使用CURLOPT_MAXREDIRS 可以限定递归返回的数量

CURLOPT_FORBID_REUSE    // 在完成交互以后强迫断开连接, 不能重用

CURLOPT_FRESH_CONNECT   // 强制获取一个新的连接, 替换缓存中的连接

CURLOPT_FTP_USE_EPRT    // 启用时当FTP下载时, 使用EPRT(或LPRT)命令, 设置为FALSE时
                            禁用EPRT 和 LPRT, 使用PORT 命令 only

CURLOPT_FTP_USE_EPSV    // 启用时,在FTP传输过程中回复到PASV模式前首先尝试EPSV命令
                            设置为FALSe时禁用EPSV命令

CURLOPT_FTPAPPEND       // 启用时追加写入文件而不是覆盖它

CURLOPT_FTPASCII        // CURLOPT_TRANSFERTEXT 的别名

CURLOPT_FTPLISTONLY     // 启用时只列出FTP目录的名字

CURLOPT_HEADER          // 启用时会将头文件的信息作为数据流输出

CURLINFO_HEADER_OUT     // 启用时追踪句柄的请求字符串

CURLOPT_HTTPGET         // 启用时会设置HTTP的method为GET, 因为GET是 默认是,所以只在被修改的情况下使用

CURLOPT_HTTPPROXYTUNNEL // 启用时会通过HTTP代理来传输

CURLOPT_MUTE            // 启用时将cURL函数中所有修改过的参数恢复默认值

CURLOPT_NETRC           // 在连接建立以后, 访问~/.netrc 文件获取用户名和密码信息连接远程站点

CURLOPT_NOBODY          // 启用时将不对HTML中的BODY 部分进行输出

CURLOPT_NOPROGRESS      // 启用时关闭curl传输的进度条,此项的默认设置为启用

CURLOPT_NOSIGNAL        // 启用时忽略所有的curl传递给php进行的信号, 在SAPI多线程
                            传输时此项被默认启用

CURLOPT_POST            // 启用时会发送一个常规的POST请求, 类型为: application/x-www-form-urlencoded, 就像表单提交一样

CURLOPT_PUT             // 启用时允许HTTP发送文件, 必须同时设置 CURLOPT_INFILE 和 CURLOPT_INFILESIZE

CURLOPT_RETURNTRANSFER  // 将curl_exec()获取的信息以文件流的形式返回, 而不是直接输出

CURLOPT_SSL_VERIFYPEER  // 禁用后cURL将终止从服务器进行验证, 使用CURLOPT_CAINFO选项设置证书使用
                           CURLOPT_CAPATH选项设置证书目录 如果CURLOPT_SSL_VERIFYPEER(默认值为2)
                           被启用, CURLOPT_SSL_VERIFYHOST需要被设置为TRUE 否则设置为 FALSE

CURLOPT_TRANSFERTEXT    // 启用后对FTP传输使用ASCII模式, 对于LDAP, 它检索纯文本信息而非HTML
                            在Windows系统上, 系统不会把STDOUT设置成binary模式

CURLOPT_UNRESTRICTED_AUTH   // 在使用CURLOPT_FOLLOWLOCATION 产生的header中多个locations中
                                持续追加用户名和密码信息, 即使域名已发生改变

CURLOPT_UPLOAD          // 启用后允许文件上传

CURLOPT_VERBOSE         // 启用时会汇报所有的信息, 存放在STDERR 或 指定的CURLOPT_STDERR 中