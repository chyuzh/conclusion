svn cvs 集中式版本控制 (有一台中央服务器储存数据)
git 分布式(将数据储存到本地)

安装完毕之后会在安装目录下生成git文件夹,文件夹里的git bash 就是linux终端

1.全局配置
$ git config --global user.name "你的名字"
$ git config --global user.email "电子邮箱"
注意git config使用 --global 参数,代表这台电脑中所有git 仓库都会使用这个配置
配置完成后 windows用户 -user下有一个 gitconfig的配置文件

Linux 简单命令 进入一个文件夹目录  cd E:/
               返回上一层         cd ../
               创建目录           mkdir 文件夹名
               查看当前目录所有文件   ls
               打印当前目录       pwd
               查看隐藏文件       ls -ah
               在终端编辑文件      vi filename
               删除文件           rm
               删除文件夹         rm -r

1)创建git 版本库

1.首先进入目标工程文件路径
  $ git init   //初始化所在文件夹,自己的电脑就成了自己的服务器  (可以在git文件夹看到.git隐藏文件夹)
2.在当前工程文件目录下创建一个readme.txt 文件
        $git status 查看版本库的状态,检查版本库的增删查改状态
        我们发现出现一个红色字体的readme.txt,意思txt文件没有被添加到缓存区或者分支里

3. $ git add readme.txt      将文件加入缓存区
   $ git commit -m "更新日志"     将文件添加到服务器
        //git commit 命令告诉git 将文件提交到仓库 -m提交到仓库发送一个消息,每次提交都要带消息(更新日志),用来描述你做了什么更新什么功能
   $ git status 查看状态,状态又变成了没有任何变化,因为所有文件都已经提交完毕

4.  修改文件(不要使用window 自带的记事本,utf-8编码文件容易出现乱码)
 给readme 添加一句话,保存关闭

    再次将readme文件提交到分支(git add , git commit)

    回退

    $ git reset --hard HEAD^    回退到上一个版本
    $ git reset --hard 每次提交时的commit ID
    $git log --pretty=oneline   查看日志 (并且是一行显示日志)

    迁出
    $git checkout -- readme.txt () //他会帮你撤回你保存过的文本,如果已经添加到
                                   //缓存区,就先输入git reset HEAD readme.txt
                                   //如果你不小心删错了,也可以通过它来恢复
    4.多文件提交
     右键GUI git可视化界面
    step1: rescan 扫描目录 查看那些是工作区那些是暂存区
    step2: stage change 暂存改动 将工作区提交到暂存区
    step3: 签名 写commit的更新日志
    step4: commit提交分支

    远程版本库
     master 一般做重要文件保存 也叫主分支 一般我们在主分支内开辟两个常用分支
     一般 dev开发分支,bug调试分支,等你的工程修改调试无误之后合并分支到master主分支上
    分支
     $ git branch 查看所有分支  *是一个指针代表我们当前所处在的 分支位置
     $ git branch dev 创建本地分支dev (只是创建分支并没有切换到dev分支)
     $ git checkout dev 分支切换
       测试在 分支中创建development.txt文件,并上传提交
       回到主分支 会发现development.txt不见了, 两个分支的存储位置不同,并不是  development.txt被删除而是 git切换了存储位置
     合并分支
       其实就是将其他分支中的东西 取过来,这里是将dev分支的文件取到master中, 分支合并的操作就要要master分支内调用合并方法
     $git merge dev 合并分支 他将会进去一个编辑页面,类似于commit更新日志 需要你在命令工具中加入更新信息,
          如何退出保存 esc 然后shift+: 输入wq 保存退出
          如果在命令行中不是$符号开头 出现:进入一种编辑模式 退出方法 Ctrl + c
    分支冲突
      不同分支的同文件下某些代码不同 会出现代码冲突 git不知道如何去处理该冲突(到底保留谁的代码)
      他会用 <<<<<< ====== >>>>>>标记出不同分支的冲突内容 需要手动处理并上传到分支中
    删除分支  dev等等分支都是服务master分支,当我们开发完一个项目的时候,就需要删除掉不用的分支
      $ git branch -D dev  -D强制删除 (没有提交完的分支代表正在使用,-d无法删除 -D可以)
      版本号的创建给项目添加版本号
      $git tag 查看标签
      $git tag v0.1


________________________________________________________________________________________

创建XMLHttpRequest 对象
//实现兼容性
var xmlhttp;
if (window.XMLHttpRequest)
{
    //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码
    xmlhttp=new XMLHttpRequest();
}
else
{
    // IE6, IE5 浏览器执行代码
    xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
}

向服务器发送请求
xmlhttp.open("GET","ajax_info.txt",true);
xmlhttp.send();

方法                                                      	描述
open(method,url,async)                              规定请求的类型、URL 以及是否异步处理请求。
                                                    method：请求的类型；GET 或 POST

                                                    url：文件在服务器上的位置

                                                    async：true（异步）或 false（同步,不推荐但如果使
                                                    用,请把onreadystatechange的函数放在send后面）


send(string)                                        将请求发送到服务器。
                                                    string：仅用于 POST 请求

__________________________________________________________________

一个完整的Ajax异步调用数据过程:

var xmlhttp;
if (window.XMLHttpRequest)
{
    //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码
    xmlhttp=new XMLHttpRequest();
}
else
{
    // IE6, IE5 浏览器执行代码
    xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
}

xmlhttp.open("GET","ajax_info.txt",true);
xmlhttp.onreadystatechange=function({
if(xmlhttp.status==200&&xmlhttp.readystate==4){

//对数据进行处理

}
})
xmlhttp.send();




GET 还是 POST？

与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。

然而，在以下情况中，请使用 POST 请求：

1.无法使用缓存文件（更新服务器上的文件或数据库）

2.向服务器发送大量数据（POST 没有数据量限制）

3.发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠


如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：

xmlhttp.open("POST","/try/ajax/demo_post2.php",true);

xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");

xmlhttp.send("fname=Henry&lname=Ford");

方法	                                 描述
setRequestHeader(header,value)	     向请求添加 HTTP 头。
                                     header: 规定头的名称
                                     value: 规定头的值

_______________________________________________________________________________

跨域

跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，

是浏览器对JavaScript施加的安全限制。

  跨域：协议 域名 端口 这三者全部一样才叫同源，否则只有其中之一不同就叫跨域

     ajax不允许跨域获取数据，所以需要想办法解决跨域获取数据问题

     解决跨域的问题方案有很多：flash、applet、jsonp、h5

     这里我们就讲一种简单而使用的方法：JSONP

     jsonp的本质是什么？动态创建script标签，通过标签的src属性发送请求，

     请求返回的内容是一段JavaScript代码（函数调用、一个变量）

    特点：动态创建的script标签加载数据的方式是异步的

  jsonp的本质：动态创建script标签，通过src属性发送请求，返回的内容是JavaScript代码（函数调用，变量）

  function callbackFunction(result) {
          console.log(result);
      }

  //全局声明了一个函数,获取到的数据就是result

<script type="text/javascript" src="https://api.douban.com/v2/book/1220562&&callback=callbackFunction"></script>

     //在url地址后面添加&&callback=你的callback函数

     //script必须写在body后面,因为callbackFunction在后面script中开始调用了,但是又不能写在window.onload函数里面,所以必须写在body下面

     callback=callbackFunction  告诉后台我用了Jsonp，名字是默认的，看你后台怎么写

     后台把数据进行简单的处理变成这样的一段js代码；

     //object 代表的是你请求的数据

     callbackFunction(object);


_________________________________________________________________________________________________

jQuery Ajax

$.ajax()

参数
options
类型：Object
可选。AJAX 请求设置。所有选项都是可选的。

async
类型：Boolean
默认值: true。默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。
注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。

beforeSend(XHR)
类型：Function
发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。
XMLHttpRequest 对象是唯一的参数。
这是一个 Ajax 事件。如果返回 false 可以取消本次 ajax 请求。

cache
类型：Boolean
默认值: true，dataType 为 script 和 jsonp 时默认为 false。设置为 false 将不缓存此页面。


jQuery 1.2 新功能。
complete(XHR, TS)
类型：Function
请求完成后回调函数 (请求成功或失败之后均调用)。
参数： XMLHttpRequest 对象和一个描述请求类型的字符串。
这是一个 Ajax 事件。

contentType
类型：String
默认值: "application/x-www-form-urlencoded"。发送信息至服务器时内容编码类型。
默认值适合大多数情况。如果你明确地传递了一个 content-type 给 $.ajax() 那么它必定会发送给服务器（即使没有数据要发送）。

context
类型：Object
这个对象用于设置 Ajax 相关回调函数的上下文。也就是说，让回调函数内 this 指向这个对象（如果不设定这个参数，那么 this 就指
向调用本次 AJAX 请求时传递的 options 参数）。比如指定一个 DOM 元素作为 context 参数，这样就设置了 success 回调函数
的上下文为这个 DOM 元素。


就像这样：
$.ajax({ url: "test.html",
         context: document.body,
         success: function(){
         $(this).addClass("done");
         }
      });

data
类型：String
发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。
必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:["bar1", "bar2"]} 转换为 '&foo=bar1&foo=bar2'。

dataFilter
类型：Function
给 Ajax 返回的原始数据的进行预处理的函数。提供 data 和 type 两个参数：data 是 Ajax 返回的原始数据，type 是调
用 jQuery.ajax 时提供的 dataType 参数。函数返回的值将由 jQuery 进一步处理。

dataType
类型：String
预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如 XML MIME 类型就被
识别为 XML。在 1.4 中，JSON 就会生成一个 JavaScript 对象，而 script 则会执行这个脚本。随后服务器端返回的数据
会根据这个值解析后，传递给回调函数。可用值:
{
 "xml": 返回 XML 文档，可用 jQuery 处理。

 "html": 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行。

 "script": 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 "cache" 参数。注意：在远程请求时(
 不在同一个域下)，所有 POST 请求都将转为 GET 请求。（因为将使用 DOM 的 script标签来加载）

 "json": 返回 JSON 数据 。

 "jsonp": JSONP 格式。使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将
          自动替换 ? 为正确的函数名，以执行回调函数。

 "text": 返回纯文本字符串
}


error
类型：Function
默认值: 自动判断 (xml 或 html)。请求失败时调用此函数。
有以下三个参数：XMLHttpRequest 对象、错误信息、（可选）捕获的异常对象。
如果发生了错误，错误信息（第二个参数）除了得到 null 之外，还
可能是 "timeout", "error", "notmodified" 和 "parsererror"。
这是一个 Ajax 事件。

global
类型：Boolean
是否触发全局 AJAX 事件。默认值: true。设置为 false 将不会触发全局 AJAX 事件，
如 ajaxStart 或 ajaxStop 可用于控制不同的 Ajax 事件。

ifModified
类型：Boolean
仅在服务器数据改变时获取新数据。默认值: false。使用 HTTP 包 Last-Modified 头信息判断。
在 jQuery 1.4 中，它也会检查服务器指定的 'etag' 来确定数据没有被修改过。

jsonp
类型：String
在一个 jsonp 请求中重写回调函数的名字。这个值用来替代在 "callback=?" 这种 GET 或 POST 请
求中 URL 参数里的 "callback" 部分，比如 {jsonp:'onJsonPLoad'} 会导致将 "onJsonPLoad=?" 传给服务器。

jsonpCallback
类型：String
为 jsonp 请求指定一个回调函数名。这个值将用来取代 jQuery 自动生成的随机函数名。
这主要用来让 jQuery 生成度独特的函数名，这样管理请求更容易，也能方便地提供回调函数和错误处理。
你也可以在想让浏览器缓存 GET 请求的时候，指定这个回调函数名。

password
类型：String
用于响应 HTTP 访问认证请求的密码

processData
类型：Boolean
默认值: true。默认情况下，通过data选项传递进来的数据，如果是一个对象(技术上讲只要不是字符串)，
都会处理转化成一个查询字符串，以配合默认内容类型 "application/x-www-form-urlencoded"。
如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。

scriptCharset
类型：String
只有当请求时 dataType 为 "jsonp" 或 "script"，并且 type 是 "GET" 才会用于强制修改 charset。
通常只在本地和远程的内容编码不同时使用。

success
类型：Function
请求成功后的回调函数。
参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。
这是一个 Ajax 事件。

traditional
类型：Boolean
如果你想要用传统的方式来序列化数据，那么就设置为 true。请参考工具分类下面的 jQuery.param 方法。

timeout
类型：Number
设置请求超时时间（毫秒）。此设置将覆盖全局设置。

type
类型：String
默认值: "GET")。请求方式 ("POST" 或 "GET")， 默认为 "GET"。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。

url
类型：String
默认值: 当前页地址。发送请求的地址。

username
类型：String
用于响应 HTTP 访问认证请求的用户名。

xhr
类型：Function
需要返回一个 XMLHttpRequest 对象。默认在 IE 下是 ActiveXObject 而其他情况下是 XMLHttpRequest 。用于重写或者提供一
个增强的 XMLHttpRequest 对象。这个参数在 jQuery 1.3 以前不可用。

--------------------------------------------------------------------------------------

回调函数
如果要处理 $.ajax() 得到的数据，则需要使用回调函数：beforeSend、error、dataFilter、success、complete。

beforeSend
在发送请求之前调用，并且传入一个 XMLHttpRequest 作为参数。

error
在请求出错时调用。传入 XMLHttpRequest 对象，描述错误类型的字符串以及一个异常对象（如果有的话）

dataFilter
在请求成功之后调用。传入返回的数据以及 "dataType" 参数的值。并且必须返回新的数据（可能是处理过的）传递给 success 回调函数。

success
当请求之后调用。传入返回后的数据，以及包含成功代码的字符串。

complete
当请求完成之后调用这个函数，无论成功或失败。传入 XMLHttpRequest 对象，以及一个包含成功或错误代码的字符串。

--------------------------------------------------------------------------------------

数据类型
$.ajax() 函数依赖服务器提供的信息来处理返回的数据。如果服务器报告说返回的数
据是 XML，那么返回的结果就可以用普通的 XML 方法或者 jQuery 的选择器来遍历。

如果见得到其他类型，比如 HTML，则数据就以文本形式来对待。

通过 dataType 选项还可以指定其他不同数据处理方式。

除了单纯的 XML，还可以指定 html、json、jsonp、script 或者 text。
其中，text 和 xml 类型返回的数据不会经过处理。数据仅仅简单
的将 XMLHttpRequest 的 responseText 或 responseHTML 属性传递给 success 回
调函数。注意：我们必须确保网页服务器报告的 MIME 类型与我们选择的 dataType 所
匹配。比如说，XML的话，服务器端就必须声明 text/xml 或者 application/xml 来
获得一致的结果。如果指定为 html 类型，任何内嵌的 JavaScript 都会在 HTML 作
为一个字符串返回之前执行。类似地，指定 script 类型的话，也会先执行服务器端
生成 JavaScript，然后再把脚本作为一个文本数据返回。如果指定为 json 类型，则
会把获取到的数据作为一个 JavaScript 对象来解析，并且把构建好的对象作为结果
返回。为了实现这个目的，它首先尝试使用 JSON.parse()。如果浏览器不支持，则使
用一个函数来构建。JSON 数据是一种能很方便通过 JavaScript 解析的结构化数据。
如果获取的数据文件存放在远程服务器上（域名不同，也就是跨域获取数据），则需要
使用 jsonp 类型。使用这种类型的话，会创建一个查询字符串参数 callback=? ，这
个参数会加在请求的 URL 后面。服务器端应当在 JSON 数据前加上回调函数名，以便
完成一个有效的 JSONP 请求。如果要指定回调函数的参数名来取代默认的 callback，
可以通过设置 $.ajax() 的 jsonp 参数。注意：JSONP 是 JSON 格式的扩展。它要
求一些服务器端的代码来检测并处理查询字符串参数。如果指定了 script 或者 jsonp
 类型，那么当从服务器接收到数据时，实际上是用了 <script> 标签而不是
 XMLHttpRequest 对象。这种情况下，$.ajax() 不再返回一个 XMLHttpRequest 对象，
 并且也不会传递事件处理函数，比如 beforeSend。

 发送数据到服务器
默认情况下，Ajax 请求使用 GET 方法。如果要使用 POST 方法，可以设定 type 参数值。
这个选项也会影响 data 选项中的内容如何发送到服务器。
data 选项既可以包含一个查询字符串，比如 key1=value1&key2=value2 ，也可以是一个映射，
比如 {key1: 'value1', key2: 'value2'} 。如果使用了后者的形式，则数据再发送器会被转
换成查询字符串。这个处理过程也可以通过设置 processData 选项为 false 来回避。如果我们
希望发送一个 XML 对象给服务器时，这种处理可能并不合适。并且在这种情况下，我们也应当
改变 contentType 选项的值，用其他合适的 MIME 类型来取代默认的 application/x-www-form-urlencoded 。

高级选项
global 选项用于阻止响应注册的回调函数，比如 .ajaxSend，或者 ajaxError，以及类似的方法。
这在有些时候很有用，比如发送的请求非常频繁且简短的时候，就可以在 ajaxSend 里禁用这个。
如果服务器需要 HTTP 认证，可以使用用户名和密码可以通过 username 和 password 选项来设置。
Ajax 请求是限时的，所以错误警告被捕获并处理后，可以用来提升用户体验。请求超时这个参数通常
就保留其默认值，要不就通过 jQuery.ajaxSetup 来全局设定，很少为特定的请求重新设置 timeout 选项。
默认情况下，请求总会被发出去，但浏览器有可能从它的缓存中调取数据。要禁止使用缓存的结果，
可以设置 cache 参数为 false。如果希望判断数据自从上次请求后没有更改过就报告出错的话，
可以设置 ifModified 为 true。scriptCharset 允许给 <script> 标签的请求设定一个特定的字
符集，用于 script 或者 jsonp 类似的数据。当脚本和页面字符集不同时，这特别好用。
Ajax 的第一个字母是 asynchronous 的开头字母，这意味着所有的操作都是并行的，完成的顺序
没有前后关系。$.ajax() 的 async 参数总是设置成true，这标志着在请求开始后，
其他代码依然能够执行。强烈不建议把这个选项设置成 false，这意味着所有的请求都不再是异步的了，
这也会导致浏览器被锁死。$.ajax 函数返回它创建的 XMLHttpRequest 对象。通常 jQuery 只在内
部处理并创建这个对象，但用户也可以通过 xhr 选项来传递一个自己创建的 xhr 对象。
返回的对象通常已经被丢弃了，但依然提供一个底层接口来观察和操控请求。比如说，调用对
象上的 .abort() 可以在请求完成前挂起请求。


