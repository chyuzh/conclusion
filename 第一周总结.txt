split函数:

split函数 会将字符串分割成字符串组；
例如：	var str = ‘Hello hi’；
	str=str.split("");
若参数里面只有引号，默认将字母一个个分割开，
若参数引号里有其他字（字母，数字或符号），
则将以这些字为分割线，分割整个字符串。

三元运算符：

判断条件? A:B；满足条件选择A 不满足选B；

return：

当一个函数 出现return 则 这个函数的值 为 return 返回的值；
例如（斐波那契数列）：
function Fibonacci(num){
    if(num === 0){
     return 0；
   }else if(num === 1){
    return 1；
  }
   return Fibonacci(num-1)+Fibonacci(num - 2)；
 }

十六进制转换 （递归）递归思维

function hex(num) {

            var num2 = parseInt(num / 16);

            if (num2 == 0) {

                hexStr += change(num)

            } else {

                hex(num2);
                hexStr += change(num % 16)
            }

        }

        function change(n) {
            switch (n) {
                case 10:
                    return 'A';
                case 11:
                    return 'B';
                case 12:
                    return 'C';
                case 13:
                    return 'D';
                case 14:
                    return 'E';
                case 15:
                    return 'F';
                default :
                    return n;
            }
        }
	
分解质因数  先判断 再开始运算

	function resolve() {
        var number = document.getElementById("number").value;


arguments:


arguments：函数内部隐藏的一个类数组 保存着函数内所有实参数据
输入arguments.length可以获得 函数的实参数量
        var result = document.getElementById("output");
        number = parseInt(number);
        var res = '';
        for(var i=2;i<Math.sqrt(number);i++){
            if(number%i==0){
                res = number+ '='
                break;
            }
        }
            if (number!=1 && i>Math.sqrt(number)){
                alert('该数为质数不能分解');
            }


        for(var j=2;j<Math.sqrt(number);j++){
            if (number%j==0){
                res += j + '&times';
                number/=j;
                j--;
            }
        }
        res+= number;
        result.innerHTML = res;
    }


变量：

变量 以作用区域划分为：局部变量和全局变量。
函数体以内的变量只在函数体内生效，并且变量遵循就近原则

基本数据类型：


所有基本数据类型的局部变量，都存放在栈中
字节数（大小）是确定的，栈中的数据有系统自动释放
当函数调用完毕时，存放在栈中的数据将会被释放

对象（obj）：

JavaScript 中的所有事物都是对象：字符串、数值、数组、函数...
此外，JavaScript 允许自定义对象，例如：
		   var Obj ={
//name,hobby,		name='许雅祺'；
//boyfriend为		hobby=['吃饭，睡觉'];
//对象的键名		boyfriend='杨梓豪';
			}
			var key = 'name';

点语法后面必须确定键名，不能跟变量 	例如：obj.name ,对；obj.key,错；

如果要遍历这种自定义对象，可以使用for in 循环 来进行遍历：
for (var item in Obj){
	console.log(obj(item)}

想删除对象中的某个键值对 ：
	delete obj.hobby;


快速选择排序法：

function quickSort(){
	if(arr.length<=1){
	return arr;}
	var prev = arr[0];
	var left = [];
	var right= [];
	for(var i=1;i<arr.length;i++){
	if(arr[i]<prev){
	left.push(arr[i])}
	if(arr[i]>prev){
	right.push(arr[i])}
	return quickSort(left).concat([prev],quickSort(right));
}


函数：


 对任何语言来说都是核心概念
 函数的声明
  1.关键字声明  function sum(){}
  2.函数表达式 var add = function(){}
  3.Function构造函数 (不推荐) var add = new Function('arg1','arg2','console.log(arg1+arg2)')
  4.匿名函数 function(){}
 函数的执行
   手动调用
   元素.事件 = 函数名
   函数立即执行
-->


数组：

filter（）方法：
创建一个新的数组，新数组中的元素是通过检查制定数组中符合条件的所有元素
例如： var ageArr = [58, 67, 45, 66, 24, 55, 99, 72];
    var newArray = ageArr.filter(function (ele, idx, array) {
        return (ele >= 48);
    })
    console.log(newArray, ageArr)
(console出来的结果是 newArray=[58,67,66,55,99,72]})

map() 方法：
返回一个由原数组中的每个元素 调用一个 制定方法后的返回值组成的新数组。
var youngAge = ageArr.map(function(ele,idx,array){
	return (ele-=20);
       	} )
	console.log(youngAge)
(console出来的结果是 youngAge=[38,47,25,46,4,35,79,52])

forEach()方法：
（不能创建一个新的数组，）结合了filter 与 map 的功能（既能过滤，
还能以一种指定方法调整数组中的每个元素）
 
 var myNewAgeArray = [];

        ageArr.forEach(function(ele,idx,arr){

        if(ele>56&&idx>2){
            console.log(ele)
            ele-=30;
            myNewAgeArray.push(ele)
        }
    });
    console.log(myNewAgeArray);


Array.push：往数组尾部添加一个或多个元素：返回新数组的长度；
Array.pop: 删除数组的最后一个元素，返回被删除的元素
Array.unshift：往数组的开头添加一个或多个元素：返回新数组的长度
Array.shift：删除数组第一个元素，返回被删除的元素

Array.sort() 将数组中的元素按照括号中的函数进行排序，返回排序后的数组
	     如果不传参将会按照字符串编码排序
	     参数一定是一个函数；
例如：	var ageArr = [58, 67, 45, 66, 24, 55, 99, 72];
   	 ageArr = ageArr.sort(function(a,b){
        return a - b  } );                    // a-b 由小到大； b-a 由大到小
   	 console.log(ageArr);

Array.reverse :将数组中的元素倒叙排列，返回的是倒叙后的数组


例如：  var demo =['h','e','l','l','o',' ','w','o','r','l','d'];
	demo = demo.reverse();
	console.log(demo)
	（console出的数组为 ["d", "l", "r", "o", "w", " ", "o", "l", "l", "e", "h"]）


Array.join():该方法参数是 字符串（string）类型，参数表示使用什么字符链接数组中
的元素，不传参默认以‘，’进行连接 ，最后得到一个拼接后的字符串。例如：
		var str = demo.join("+");
		console.log(str)
	(console 出的字符串为 ‘h+e+l+l+o+ +w+o+r+l+d’)


Array.slice(start[,end
]): 返回数组的子片段，从start开始，到end（不包括end所对应


的元素），如果省略end，则从start开始截取到数组的最后一项
	var demo_01 = demo.slice(0,3);
	var demo_02 = demo.slice(3);
	console.log(demo_01,demo_02)
	(console 出的数组为["h", "e", "l"]  ["l", "o", " ", "w", "o", "r", "l", "d"])


Array.splice（start,deletNumber,items）：在数组中插入 删除 替换的通用方法，start
（从数组的什么位置开始），deletNumber（删除几个元素），items （插入替换成什么元素）
例如：demo.splice(1,3,1,2,3)//（从第1个开始（不包括1），删除3个元素，替换成1，2，3）
  	  console.log(demo)
（console 出的数组为["h", 1, 2, 3, "o", " ", "w", "o", "r", "l", "d"]）
		


Array.isArray(): 可以判断一个 对象是否为数组 返回true 或 false；
 	例如：Array.isArray（demo）；
	console.log(Array.isArray(demo))
	(console结果为true)

   原生js判断数组的方法：
    var arr1 = [1,2,3];
    var obj2 = {key:'123',name:'小明'}
    function isArrayFn (obj){

        if(typeof obj === 'object'){
            console.log(obj.constructor === Array)
        }else{
            alert('错误')
        }

    }
    isArrayFn(arr1);
    isArrayFn(obj2)



indexOf()/lastIndexOf()： 方法可返回一个指定的字符串值第一次/最后出现的位置
在一个字符串中的指定位置 从前向后/从后向前 搜索， 返回值在 0~length-1 之间。
第一个参数是字符串值，第二个可选整型参数，规定从哪个元素开始搜索
		
例如：var indexArr = ['gec',1,2,3,'hello','gec'];
   		 console.log(indexArr.lastIndexOf('gec'))
			

天气预报：

function initWeather () {
	var objdate = date.future;
	var box = document.getElementById("box");
	box.innerHTML = '';
	for(var i =0 ; i<objdate.length;i++){
	 var data = objdate[i];
	showForecast(data,box);}
}
function showForecast(obj,output){
	var str = '<div id= "weather">'+'<p>'+obj.day+'</p>';
	str +='<p>温度：'+obj.temperature+'</p>';
	str +='<p>天气：'+obj.weather+'</p>';
	str +='<p>风级：'+obj.wind+'</p>'
	output.innerHTML += str;
}


选择排序：
var arr = [4,6,5,65,32,56,2,56,78,3423,65,34,63,45,45,3,2,43,23,14,43];

for(var i=0 ; i<arr.length;i++){
        var min =i ;
        for(var j =i+1;j<arr.length;j++){
            if( arr[min] < arr[j]){
                min =j;
            }
        }
        var temp = arr[min];
        arr[min] = arr[i];
        arr[i] = temp;
    }

    console.log(arr)

字符串
var str = 'hello world';


字符串的获取方法，例如：

charAt（4）获取下标为4的字符
charCodeAt（4）获取下标为4的字符的ASCII码 或者UniCode编码值
fromCharCode（65） 编码转字符


字符串的查找方法，例如：

	str.indexOf（'l'）:查找字符串中该字符的位置 从左到右开始查找
	str.lastIndexOf('l')：查找字符串中该字符的位置 从右到左开始查找
	console.log(str.indexOf('l'),str.lastIndexOf('l'));
	(console 的结果 分别是 2 和 9)

Array.search():查找字符串中第一个该字符的位置 同indexOf
Array.match():返回一个匹配到字符串的数组 index 字符所在的索引 input:表示整个字符串的引用
	例如：console（str.match('l')）
	(console出来的结果为 ["l", index: 2, input: "hello world"])
Array.replace():字符串替换, 注意第一个参数为string类型的话替换只能执行一次
（正则表达式             如果需要全部替换(全局匹配),必须使用正则表达式
/l/ig  找到所有l（不		console.log(/l/g,'i');
分大小写）的字符）	(console的结果为 heiio worid)


字符串的截取方法
	str.substring(start[,end])字符串的截取方法不包括end
	str.substr(start,length)从索引值start开始（不包括start）截取长度为length字符串
				start可以为负数 -5意思为 从倒数第五个开始截取
	str.slice(start,end)字符串的截取方法不包含end 支持负数
	 console.log(str.slice(-4,-1)); 

字符串分割
	split('') 根据分割字符(参数),把字符串拆分成数组

    string = 'hello world';
    var arr = string.split(',')
    console.log(arr);
    arr.reverse()
    string = arr.join('')

ECMAScript5方法 Array.trim() 删除 前后 所有空格 返回一个新的字符串

字符串大小写
    toUpperCase()  字符串转大写字符
    toUpperCase() 字符串转小写字符
   console.log(string.toLowerCase())


