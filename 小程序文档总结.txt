基础教程
--------------
.wxml 是WXML模板文件(充当HTML角色)

平常我们用的div , span, p , 这样我们编程效率实在太慢
wxml已经把一些所用到的组件打包完成,提高我们开发的效率(view,button,text)
并且增加了wx:if的属性以及{{}}这样的表达式

这样我们只需要管理数据就行了,而不用对DOM负责

------------------------------------

数据绑定:
  <view>{{message}}</view>
  <view id="item-{{id}}">{{message}}</view>
  {{}}可以进行一些简单的运算
  三元云端    a?1:2
  算数运算    a+b
  逻辑判断    a>5
  字符串运算   a+1
  数据路径运算 obj.item,arr[0]

  也可以放入组合(对象,数组)
  <view wx:for="{{[zero, 1, 2, 3, 4]}}"> {{item}} </view>

  Page({
    data: {
      zero: 0
    }
  })

  // 花括号和引号之间如果有空格，将最终被解析成为字符串

  <view wx:for="{{[1,2,3]}} ">
    {{item}}
  </view>

  // 等同于

  <view wx:for="{{[1,2,3] + ' '}}">
    {{item}}
  </view>

-------------------------------

列表渲染:
  <view wx:for="{{array}}" wx:for-item="item" wx:for-index="index">{{item}}</view>

  block wx:for
  渲染包含多节点结构块
  <block wx:for="{{[1,2,3]}}">
    <view>{{index}}:</view>
    <view>{{item}}</view>
  </block>

  // block只是包装元素,不会渲染,只接受控制属性

  wx:key



  // 当 wx:for 的值为字符串时，会将字符串解析成字符串数组

  <view wx:for="array">
    {{item}}
  </view>

  // 等同于

  <view wx:for="{{['a','r','r','a','y']}}">
    {{item}}
  </view>
  // 花括号和引号之间如果有空格，将最终被解析成为字符串

  <view wx:for="{{[1,2,3]}} ">
    {{item}}
  </view>

  // 等同于

  <view wx:for="{{[1,2,3] + ' '}}" >
    {{item}}
  </view>

----------------------------------

条件渲染:
  <view wx:if="{{view == 'WEBVIEW'}}">WEBVIEW</view>
  <view wx:elif="{{view == 'APP'}}">APP</view>
  <view wx:else="{{view == 'MINA'}}">MINA</view>

  block wx:if
  一次判断多个组件标签
  // block只是包装元素,不会渲染,只接受控制属性

  // wx:if 与 hidden

  wx:if 条件改变会使块销毁或重新渲染(用于初次渲染时,条件判定)
  hidden 只是隐藏了,但初始时也会一起渲染(频繁切换)
----------------------------------

模板:
// wxml 部分
  <template name="staffName">
    <view>
      FirstName: {{firstName}}, LastName: {{lastName}}
    </view>
  </template>

  <template is="staffName" data="{{...staffA}}"></template>
  <template is="staffName" data="{{...staffB}}"></template>
  <template is="staffName" data="{{...staffC}}"></template>

// js 部分
  Page({
    data: {
      staffA: {firstName: 'Hulk', lastName: 'Hu'},
      staffA: {firstName: 'Shang', lastName: 'You'},
      staffA: {firstName: 'Gideon', lastName: 'Lin'}
    }
  })
------------------------------------------------
.json 是JSON配置文件

小程序配置 app.json
app.json是对当前小程序的全局配置,包括了小程序的所有页面路径,界面表现,网络超时时间,底部tab等

配置项列表

属性                  类型            必填              描述
pages               String或Array      是              设置页面路径
window              Object             否              设置默认页面的窗口表现
tabBar              Object             否              设置底部tab的表现
networkTimeout      Object             否              设置网络超时时间
debug               Boolean            否              设置是否开启debug模式

详细介绍
pages:
接受一个数组, 每一项都是字符串,来指定小程序由哪些页面组成,每一项代表对应页面
的(路劲+文件名)信息,数组的第一项代表小程序的初始页面,小程序中新增/减少页面,
都要对pages数组进行修改\

例如:
{
  "pages":[
    "pages/index/index",
    "pages/logs/logs"
  ]
}
-----------------
window:

用于设置小程序的状态栏,导航条,标题,窗口背景色

属性                          类型        默认值       描述
navigationBarBackgroundColor  HexColor    #000000     导航栏背景颜色
navigationBarTextStyle        String      white       导航栏标题颜色,仅支持black/white
navigationBarTitleText        String                  导航栏标题文字内容
backgroundColor               HexColor    #ffffff     窗口背景色
backgroundTextStyle           String      dark        下拉背景色字体,loading图样式,仅支持 dark/light
enablePullDownRefresh         Boolean     false       是否开启下拉刷新
onReachBottomDistance         Number      50          页面上拉触底事件出发时距页面底部距离,单位px

---------------------------------
tabBar:

如果小程序是一个多tab应用(客户端窗口的底部或顶部有tab栏可以切换页面), 可通过tabBar配置项
指定tab栏的表现,以及tab切换时显示的对应页面

// 当设置position 为 top , 将不会显示该tab的图标(icon)

属性说明:

属性              类型      必填      默认值     描述
color             HexColor  是                  tab上文字的默认颜色
selectedColor     HexColor  是                  tab上文字选中时的颜色
backgroundColor   HexColor  是                  tab的背景颜色
borderStyle       String    否       black      tabBar上边框的颜色,仅支持black/white
list              Array     是                  tab的列表
position          String    否       bottom     可选 bottom top

// tabBar 中的list是一个数组, 只能配置2-5个tab, tab按数组的顺序来排列

list接受一个数组,数组中的每个项都是一个对象,其属性值如下:

属性              类型      必填        说明
pagePath          String    是         页面路径,必须在pages中先定义
text              String    是         tab上按钮的文字
iconPath          String    否         图片路径,icon大小限制为40kb,建议81×81
selectedIconPatch String    否         选中时的图片路径

----------------------
networkTimeout:
可以设置各种网络请求的超时时间

属性说明:

属性                类型      必填      说明

request             Number    否       wx.request的超时时间,单位ms,默认60000

connectSocket       Number    否       wx.connectSocket的超时时间

uploadFile          Number    否       wx.uploadFile的超时时间

downloadFile        Number    否       wx.downloadFile的超时时间

------------------------
debug:
可以再开发者工具中开启debug模式,在开发者工具的控制台面板,调试信息以info的形式给出,
其信息有 Page的注册, 页面路由, 数据更新, 时间触发, 可以帮助开发者快速定位一些常见的问题

--------------------------

页面配置 page.json

page.json只能配置 单独页面的window属性
所以在json中不需要填加 window字段

属性列表:

属性                          类型        默认值       描述
navigationBarBackgroundColor  HexColor    #000000     导航栏背景颜色
navigationBarTextStyle        String      white       导航栏标题颜色,仅支持black/white
navigationBarTitleText        String                  导航栏标题文字内容
backgroundColor               HexColor    #ffffff     窗口背景色
backgroundTextStyle           String      dark        下拉背景色字体,loading图样式,仅支持 dark/light
enablePullDownRefresh         Boolean     false       是否开启下拉刷新
diableScroll                  Boolean     false       设置为true页面整体不能上下滚动,只在page.json中有效
onReachBottomDistance         Number      50          页面上拉触底事件出发时距页面底部距离,单位px


--------------------------
工具配置 project.config.json(类似package.json):

字段名             类型                说明
miniprogramRoot   Path String         指定小程序源码的目录(需为相对路径)
qcloudRoot        Path String         指定腾讯云项目的目录(需为相对路径)
setting           Object              项目设置
{
  es6             Boolean             是否启用es5转es6
  postcss         Boolean             上传代码时样式是否自动补全
  minified        Boolean             上传代码时是否自动压缩
  urlCheck        Boolean             是否检查安全域名和TLS 版本
}

-----------------------------------------------------------
.wxss 是WXSS样式文件

wxss具有css大部分的特性,小程序在wxss也做了一些扩充和修改

1. 新增了尺寸单位,rpx,开发者免去换算的烦恼,由于换算采用浮点数,所以会有些许偏差
        // rpx(responsive pixel):可以根据屏幕宽度进行自适应,规定屏幕宽度为750rpx,在iPhone6上,
        // 屏幕宽度为375px,共有750个物理像素,1rpx = 0.5px = 1物理像素

     设备               rpx换算px(屏幕宽度/750)             px换算rpx(750/屏幕宽度)
     iPhone5            1rpx = 0.42px                        1px = 2.34rpx
     iPhone6            1rpx = 0.5px                         1px = 2rpx
     iPhone6 Plus       1rpx = 0.552px                       1px = 1.81rpx

    // 开发微信小程序是 设计师可以用iPhone6 作为视觉稿的标准
    // 在较小的屏幕上不可避免的会有一些毛刺, 在开发时尽量避免这种情况

    样式导入

    使用 @import 语句 导入外联样式表

    内联样式

    框架组件上支持使用style class属性来控制组件的样式

    style: 静态的样式统一写到class中, 这样可以加快渲染速度 <view class="normal_view" />
           动态样式写法: <view style="color:{{color}};">

2. 提供全局样式和局部样式,在app.wxss中写全局样式,在page.wxss中写局部样式

3. wxss仅支持部分css选择器

    目前支持的选择器: class选择器, id选择器, 标签选择器, 兄弟选择器, ::after, ::before



----------------------------------------------------------
.js   是JS脚本逻辑文件

因为我们不需要再去负责DOM方面,而只需要关注数据逻辑上的问题,所以下面是小程序给出的事件API

-------------------------

事件列表:

touchstart      手指触摸动作开始
touchmove       手指触摸后移动
touchcancel     手指触摸动作被打断,如来电提醒,弹窗
touchend        手指触摸动作结束
tap             手指触摸后马上离开
longpress       手指触摸后,超过350ms再离开, 如果指定了事件回调函数并出发了这个事件,tap事件将不被触发
longtap         手指触摸后,超过350ms在离开(推荐使用longpress事件代替)
transitionend   会在wxss transition 或 wx.creactAnimation 动画结束后触发
animationstart  会在wxss animation 动画开始时触发
animationend    会在wxss animation 动画完成时触发

// 除了以上之外其他组件 自定义事件如无特殊申明都是非冒泡事件, 如<form/> 的submit 事件 input事件 scroll事件

----------------------------

事件绑定和冒泡:

事件绑定的写法同组件的属性, 以 key,value(键值对) 的形式

key 以 bind 或 catch 开头, 然后跟上事件的类型, 如 bindtap, catchtouchstart
// 自基础库1.5.0以后 bind:tap 与bindtap  catch:touchstart与 catchtouchstart含义相同

value 是一个字符串,需要在对应的page 中定义同名的函数,不然当触发事件的时候会报错

bind 事件绑定向上上冒泡, catch 事件绑定阻止冒泡

-----------------------------

事件的捕获阶段:

capture-bind, capture-catch 将可用于捕获,后者会中断捕获阶段和取消冒泡阶段

-------------

事件对象(Event)

BaseEvent 基础事件对象属性列表:

属性          类型      说明
type          String    事件类型
timeStamp     Integer   事件生成的时间戳
target        Object    触发事件的组件的一些属性值集合
  {
    id        String    事件源组件的id
    tagName   String    当前组件的类型
    dataset   Object    事件源组件上由data- 开头的自定义属性组成的集合
  }
currentTarget Object    当前组件的一些属性值集合
  {
    id        String    事件组件的id
    tagName   String    当前组件的类型
    dataset   Object    事件源组件上由data- 开头的自定义属性组成的集合
  }

CustomEvent 自定义事件对象属性列表(继承BaseEvent):

属性      类型      说明
detail    Object    额外的信息,自定义时间所携带的数据, 如果表单组件的提交事件会携带用户的输入
                    媒体的错误事件会携带错误信息

TouchEvent 触摸事件对象属性列表(继承 BaseEvent):

属性            类型          说明
touches         Array         触摸事件, 当前停留在屏幕中的触摸点信息的数组
  [
    identifier  Number        触摸点的标识符
    pageX,pageY Number        距离文档左上角的距离, 文档的左上角为原点,横向为X轴,纵向为Y轴
    clientX,clientY Number    距离页面可显示区域(屏幕出去导航条)左上角距离,横向为X轴, 纵向为Y轴
  ]
// 当在canvas中 CanvasTouch对象
  [
    identifier  Number        触摸点的标识符
    x,y         Number        距离Canvas左上角的距离, Canvas的左上角为原点,横向为X轴,纵向为Y轴
  ]
changedTouches  Array         触摸事件, 当前变化的触摸点信息的数组
                              表示有变化的触摸点,如从无变有(touchstart),位置变化(touchmove),
                              从有变无(touchend,touchcancel)

// 特殊事件 <canvas/> 中的触摸事件不可冒泡, 所以没有currentTarget

-----------------------------------------------
引入

import // 引入 暴露接口的js文件
<import src="a.wxml">
C import B    B import A    但C不可以直接引用A

include
<include src="header.wxml">
可以将目标文件除了 <template/> <wxs/> 外的整个代码引入,相当于拷贝到include位置

-------------------------------------------------------------------
WXS

WXS 是小程序的一套脚本语言, 结合 WXML , 可以构建出页面的结构

// wxs 不依赖于运行时的基础库版本, 可以在所有版本的小程序中运行
// wxs 与 JavaScript是不同的语言, 有自己的语法, 并不和JavaScript一致
// wxs的运行环境和其他JavaScript代码是隔离的, wxs中不能调用其他JavaScript文件中
// 定义的函数,也不能调用小程序提供的API
// wxs函数不能作为组件的事件回调
// 由于运行环境的差异, 在iOS 设备上小程序内的wxs 回避JavaScript 代码快2~20 倍
    在Android设备上两者运行效率 无差异

// 一个返回数组最大的元素的值

// page.wxml
<wxs module= "m1">
  var getMax = function(arr){
    var max = undefined;
    for(var i=0;i<arr.length;i++){
      max = max===undefined? arr[i]: (max>arr[i]? max: arr[i])
    }
    return max
  }
module.exports.getMax = getMax;
</wxs>

<view>{{m1.getMax(arr)}}</view>

// page.js
Page({
  data: {
    arr: [1,3,2,1,4,5,6,2,1,3]
  }
})
-----------------------------------
可以将wxs 代码 写入 wxs后缀文件

// wxml

<wxs src="a.wxs" module="_module">

wxs 也可以 用import

--------------------------------------------------------------

框架

App()
  App()函数用来注册一个小程序,接受一个Object参数,其指定小程序的生命周期函数

  Object参数说明:

 属性         类型        描述                      触发时机
 onLaunch     Function    监听小程序初始化        初始化完成时
 onShow       Function    监听小程序显示          小程序启动,或从后台进入前台显示,会触发
 onHide       Function    监听小程序隐藏          从前台进入后台,会触发
 onError      Function    错误监听函数            发生脚本错误时或api调用失败时触发
 其他         Any                                 开发者可以添加任意函数或数据到Object参数中,用this可以访问

 // 前台,后台定义:
 // 当用户点击左上角关闭,或者按了设备HOME键离开微信,小程序并没有直接销毁,而是进入了后台,
 // 当再次进入微信或再次打开小程序,又会从后台进入前台(当小程序进入后台一定时间,或系统资源
  占用过高,切没有置顶小程序的情况下退出,才会被销毁)

onLaunch, onShow 参数

字段                类型      说明

path                String    打开小程序的路径
query               Object    打开小程序的query
scene               Number    打开小程序的场景值
shareTicket         String    shareTicket(转发)
referrerInfo        Object    当场景为由从另一个小程序或公众号或App打开,返回此字段
referrerInfo.appId  String    来源小程序或公众号或App的appId
referrerInfo.extraData Object   来源小程序传过来的数据, scene=1037 或1038 时支持

场景值:

场景值ID	说明
1001	发现栏小程序主入口
1005	顶部搜索框的搜索结果页
1006	发现栏小程序主入口搜索框的搜索结果页
1007	单人聊天会话中的小程序消息卡片
1008	群聊会话中的小程序消息卡片
1011	扫描二维码
1012	长按图片识别二维码
1013	手机相册选取二维码
1014	小程序模版消息
1017	前往体验版的入口页
1019	微信钱包
1020	公众号 profile 页相关小程序列表
1022	聊天顶部置顶小程序入口
1023	安卓系统桌面图标
1024	小程序 profile 页
1025	扫描一维码
1026	附近小程序列表
1027	顶部搜索框搜索结果页“使用过的小程序”列表
1028	我的卡包
1029	卡券详情页
1030	自动化测试下打开小程序
1031	长按图片识别一维码
1032	手机相册选取一维码
1034	微信支付完成页
1035	公众号自定义菜单
1036	App 分享消息卡片
1037	小程序打开小程序
1038	从另一个小程序返回
1039	摇电视
1042	添加好友搜索框的搜索结果页
1043	公众号模板消息
1044	带 shareTicket 的小程序消息卡片（详情)
1047	扫描小程序码
1048	长按图片识别小程序码
1049	手机相册选取小程序码
1052	卡券的适用门店列表
1053	搜一搜的结果页
1054	顶部搜索框小程序快捷入口
1056	音乐播放器菜单
1058	公众号文章
1059	体验版小程序绑定邀请页
1064	微信连Wifi状态栏
1067	公众号文章广告
1068	附近小程序列表广告
1072	二维码收款页面
1073	客服消息列表下发的小程序消息卡片
1074	公众号会话下发的小程序消息卡片

-----------------------------------------------------

getApp()
全局的getApp()函数可以用来获取到小程序实例

App()必须在app.js中注册,且不能注册多个
不要定义于App()内的函数中调用getApp(),使用this就可以拿到app实例
不要在onLaunch的时候调用getCurrentPages(),此时page还没有生成
通过getApp()获取实例之后,不要私自调用声明周期函数

---------------------------------------------------

Page

Page() 函数用来注册一个页面,接受一个Object参数,其指定页面的初始数据,生命周期函数,事件处理函数等

Object参数说明:

属性              类型        描述
data              Object      页面的初始数据
// 生命周期事件
onLoad            Function    监听页面加载
onReady           Function    监听页面初次渲染完成
onShow            Function    监听页面显示
onHide            Function    监听页面隐藏
onUnload          Function    监听页面卸载
onPullDownRefresh Function    监听用户下拉刷新
// 页面滚动事件
onReachBottom     Function    页面上拉触底事件
onShareAppMessage Function    用户点击右上角转发
onPageScroll      Function    页面滚动触发
其他              Any         自定义函数

生命周期函数

onLoad  页面加载(一个页面只调用一次,可以在onLoad中获取打开当前页面所调用的query参数)
onShow  页面显示(每次打开页面调用一次)
onReady 页面初次渲染完成(只调用一次)
onHide  页面隐藏  (当navigate 或底部tab 切换时调用)
onUnload页面卸载  (当redirectTo 或 navigateBack 时调用)

页面相关事件处理函数

onPullDownRefresh: 下拉刷新
  监听用户下拉刷新事件
    需要在app.json的window选项中或页面配置中开启enablePullDownRefresh。
    当处理完数据刷新后，wx.stopPullDownRefresh可以停止当前页面的下拉刷新。
onReachBottom: 上拉触底
  监听用户上拉触底事件
    可以在app.json的window选项中或页面配置中设置触发距离onReachBottomDistance。
    在触发距离内滑动期间，本事件只会被触发一次。
onPageScroll: 页面滚动
  监听用户滑动页面事件
  参数为 Object，包含以下字段：
  字段      	      类型	      说明
  scrollTop	      Number	页面在垂直方向已滚动的距离（单位px）

onShareAppMessage 用户转发
  只有定义了此事件处理函数,右上角才会显示转发按钮
  用户点击转发按钮时调用
  此事件需要return一个Object,用于自定义转发的内容

  自定义转发字段

  字段              说明            默认值
  title             转发标题        当前小程序名称
  path              转发路径        当前页面path, 必须是/开头的完成路径

-------------------------------------------------------

初始化数据
Page({
  data: {
    text: 'init data'
  }
})

更改数据

Page.prototype.setData()
  setData函数用于将数据从逻辑层发送到视图层(异步),同时改变对应的this.data的值(同步)

setData() 参数格式

字段       类型       必填        描述            最低版本
data      Object      是         这次要改变的数据
callback  Function    否         回调函数          1.5.0

// 直接修改this.data 而不调用this.setData 是无法改变页面状态的,而且还造成数据不一致
// 单词设置的数据不能超过1024kb,请尽量避免一次设置过多的数据
// 请不要把data中任何一项的value设为undefined,不然会不被设置,还会遗留潜在问题

--------------------------------------------

页面路由      // 在小程序中所有页面的路由全部由框架进行管理

页面栈       // 框架以栈的形式维护了当前的所有页面,当发生路由切换的时候,页面栈的表现如下:
------------------------------------
路由方式              页面栈表现

初始化                 新页面入栈
打开新页面             新页面入栈
页面重定向             当前页面出栈,新页面入栈
页面返回               页面不断出栈,直到目标返回页,新页面入栈
Tab切换                页面全部出栈, 只留下新的Tab页面
重加载                 页面全部出栈, 只留下新的页面

-------------------------------------

getCurrentPages()

getCurrentPages()函数用于获取当前页面栈的实例, 以数组形式按栈的顺序给出,第一个元素为首页
最后一个元素为当前页面

// 不要修改页面栈,会导致路由以及页面状态错误

路由方式  // 对于路由的触发方式以及页面生命周期函数如下

路由方式              触发时机                                   路由前页面       路由后页面

初始化         小程序打开的第一个页面                                             onLoad,onShow

打开新页面     调用API wx.navigateTo 或使用组件<navigator         onHide          onLoad,onShow
                open-type="navigateTo">
页面重定向     调用API wx.redirectTo 或使用组件<navigator         onUnload        onLoad,onShow
                open-type="redirectTo">
页面返回        调用API wx.navigateBack 或使用组件<navigator       onUnload       onShow
                open-type="navigateBack">
Tab切换         调用API wx.switchTab 或使用组件<navigator                         各种情况请参见下表
                open-type="switchTab">
重启动         调用API wx.reLaunch 或使用组件<navigator           onUnload        onLoad,onShow
                open-type="reLaunch">

Tab 切换对应的生命周期(A,B页面为TabBar 页面, C是从A 页面打开的页面,D页面是从C 页面打开的页面为例)

当前页面	        路由后页面	        触发的生命周期（按顺序）
A	                A	            Nothing happend
A	                B	            A.onHide(), B.onLoad(), B.onShow()
A	                B（再次打开）	A.onHide(), B.onShow()
C	                A	            C.onUnload(), A.onShow()
C	                B	            C.onUnload(), B.onLoad(), B.onShow()
D	                B	            D.onUnload(), C.onUnload(), B.onLoad(), B.onShow()
D（从转发进入）	    A	            D.onUnload(), A.onLoad(), A.onShow()
D（从转发进入）	    B	            D.onUnload(), B.onLoad(), B.onShow()

// navigate, redirectTo 只能打开非tabBar 页面
// switchTab 只能打开tabBar 页面
// reLaunch   可以打开任意页面
// 页面底部的tabBar 由页面决定, 即只要是定义为tabBar 的页面,底部都有tabBar
// 调用页面路由带的参数可以在目标页面的onLoad中获取

-----------------------------------------------

文件作用域

在JavaScript文件中声明的变量和函数只在该文件中有效, 不同的文件中可以声明相同名字
的变量和函数,不会互相影响

通过全局函数getApp() 可以获取全局的应用实例, 如果需要全局的数据可以在App()中设置

App({
  globalData: 1
})

var app = getApp()

app.globalData++

---------------------

模块化

可以讲一些公共的代码抽离成为一个单独的js文件,作为一个模块,模块只有通过module.exports
或exports 才能对外暴露接口

// 需要注意的是
// exports 是 module.exports 的一个引用, 因此在模块里随意更改exports的指向会造成
// 未知的错误, 所以更推荐开发者采用module.exports 来暴露模块接口,除非你已经清晰知道这两者
// 的关系
// 小程序目前不支持直接 node_modules, 开发者需要用到 node-modules 时候建议
// 拷贝出相关代码到小程序的引入目录中

// require 暂时不支持绝对路径