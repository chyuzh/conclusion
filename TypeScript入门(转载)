TypeScript 是JavaScript的一种语法糖        // 用于维护大型JavaScript程序

TypeScript 是ECMAScript的5 (ES5)语法的超集,每个JavaScript程序也是一个TypeScript程序
TypeScript编译器只在本地执行转换,并且不会重新定义TypeScript声明的变量,这导致输出的JavaScript
代码非常接近TypeScriptdiamante  TypeScript不改变变量名,这使得JavaScript更易于调试  TypeScript
提供可选代码地图,可以进行源代码级调试  TypeScript通常根据保存的文件生成JavaScript代码,在JavaScript开发中
常常保存测试,编辑和刷新周期

------------------------------------------------

1.1 环境声明

环境声明向TypeScript中引入一个变量,但对于生成的JavaScript程序没有任何影响, 程序员可以使用环境声明告诉
TypeScript编译器,其他一些组件将提供一个变量, 例如,默认情况下在使用未定义的变量时,TypeScript编译器将生成一个
错误要添加一些由浏览器定义的公共变量,TypeScript程序员可以使用这些环境声明, 下面的示例声明通过浏览器提供
的"document"对象, 由于声明没有指定类型,该类型"any" 可以进行推断, 类型"any" 是指一种工具可以假设没有任何关于
文档对象的形状或行为, 以下一些例子将说明程序员如何可以使用类型来进一步描述对象的预期行为

1.2 函数类型

TypeScript的函数类型,使程序员表达函数的预期的签名成为可能, 函数签名是一个序列参数类型以及返回类型

1.3 对象类型

TypeScript程序员使用对象类型来声明对象行为的期望, 下面的代码使用的对象类型来指定"MakePoint"函数的返回类型:

var MakePoint: () => {
    x: number; y:number;
}

程序员可以给名字对象类型, 我们调用一个名为对象类型的借口, 例如, 下面的代码, 接口声明了一个必填字段(名称)
和一个可选字段

interface Friend {
    name: string ;
    favoriteColor?: string ;        // 带问号的属于非必须属性
}
function add(friend:Friend) {
var name = friend.name;
}
add({name: "Fred" });  // Ok
add({ favoriteColor: "blue" });  // 错误, 必须传入name参数
add({ name: "Jill" ,favoriteColor: "green" });  // Ok

TypeScript对象类型模型的行为, 一个JavaScript对象 可以表现出的多样性, 举例来说,jQuery库定义了一个对象, $,
有方法,如'get',和字段,如'browser', 然而 jQuery用户还可以调用$ 作为一个函数, 这个函数的行为取决于传递给
函数的参数类型

下面的代码片段捕捉到jQuery行为的一小部分,就足够使用jQuery的一个简单方法

interface jQuery {
    text(content: string);
}
interface JQueryStatic {
    get(url:string, callback: (data: string)=> any);
    (query: string): JQuery;
}
declare var $: JQueryStatic;
$.get('#',
function(data:string){
    $('div').text(data);
}
);

JQueryStatic借口引用了另一个接口JQuery, 此接口表示一个或多个DOM元素的集合, JQuery库可以在这样一个集合中
执行许多操作,但在这个例子中, jQuery的客户端只需要知道它可以通过传递一个字符串text的方法设置每个jQuery的元素在集合中
的文本内容, 在JQueryStatic 接口中还包含了一个方法, 'get' , 执行一个Ajax获得所提供的网址操作, 并在接收到响应
时调用回调
最后, JQueryStatic接口中包含了裸露的函数签名

裸露的签名表示该接口的示例可以被调用, 这个例子说明, TypeScript函数类型是TypeScript对象类型的一种特殊情况,
具体的,函数类型是含有一个或多个调用特征的对象类型, 处于这个原因,我们可以写任何函数类型为对象类型, 下面用这两种形式来描述相同类型

var f: {(): string};
var sameType: ()=>string = f;
var nope: ()=> number = sameType;

上面我们提到, $ 功能表现的不同取决于它的参数的类型, 到目前为止, 我们的jQuery输入只能捕获这些行为之一:
当传递一个字符串返回类型的对象jQuery, 要指定多个行为, TypeScript支持函数签名的对象类型重载, 例如, 我们可以
添加一个额外的调用签名的JQueryStatic 接口

(ready: () => any) : any

此签名表示该函数可作为 $ 函数的参数进行传递, 当一个函数传递给$, 当DOM 文档准备就绪时, jQuery库将调用该函数
由于TypeScript支持重载, 工具可以用TypeScript来显示所有可用的函数签名与他们的文档的提示, 并给予当一个函数被
调用特定的签名正确的文档

典型客户端 将不需要添加任何额外的输入, 但可以只使用一个社区提供的输入发现(通过语句完成了文件的提示), 并验证(通过静态检查)正确使用类库


1.4 结构子类型化

对象类型是比较结构, 例如, 下面的代码片段, 类 CPoint 匹配接口 Point, 因为CPoint 有所有Point 所要求的成员,
一个雷可以选择性的声明它实现一个接口,这样编译器会检查声明中结构的兼容性, 这个例子也说明了, 一个对象类型
可以从一个对象字面的意思推断出类型, 只要这个对象支持所有必要的成员